{
  "source":{
    "hash":"0xbd4e33745c3c0d902aa8bdd6fe0a3f836aeabad4cc3c74a96973e472ebc24e14",
    "language":"ink! 3.2.0",
    "compiler":"rustc 1.61.0-nightly"
  },
  "contract":{
    "name":"contract_with_complex_types",
    "version":"1.0.0",
    "authors":[
      "The best developer ever"
    ]
  },
  "V3":{
    "spec":{
      "constructors":[
        {
          "args":[
            {
              "label":"initial_supply",
              "type":{
                "displayName":[
                  "Balance"
                ],
                "type":0
              }
            },
            {
              "label":"name",
              "type":{
                "displayName":[
                  "Option"
                ],
                "type":11
              }
            },
            {
              "label":"symbol",
              "type":{
                "displayName":[
                  "Option"
                ],
                "type":11
              }
            },
            {
              "label":"decimal",
              "type":{
                "displayName":[
                  "u8"
                ],
                "type":4
              }
            },
            {
              "label":"cap",
              "type":{
                "displayName":[
                  "Balance"
                ],
                "type":0
              }
            }
          ],
          "docs":[

          ],
          "label":"new",
          "payable":false,
          "selector":"0x9bae9d5e"
        }
      ],
      "docs":[

      ],
      "events":[

      ],
      "messages":[
        {
          "args":[

          ],
          "docs":[

          ],
          "label":"change_state",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "Result"
            ],
            "type":12
          },
          "selector":"0x300f90c8"
        },
        {
          "args":[

          ],
          "docs":[
            " Method to return token's cap"
          ],
          "label":"cap",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "Balance"
            ],
            "type":0
          },
          "selector":"0xb00b03c6"
        },
        {
          "args":[

          ],
          "docs":[

          ],
          "label":"get_complex_struct_1",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "ComplexStruct1"
            ],
            "type":14
          },
          "selector":"0x35b990c3"
        },
        {
          "args":[

          ],
          "docs":[

          ],
          "label":"get_complex_struct_2",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "ModForComplexStructOverflow",
              "ComplexStruct1"
            ],
            "type":18
          },
          "selector":"0xe2f1e698"
        },
        {
          "args":[
            {
              "label":"s",
              "type":{
                "displayName":[
                  "ComplexStruct1"
                ],
                "type":14
              }
            }
          ],
          "docs":[

          ],
          "label":"get_complex_struct_3",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "ModForComplexStructOverflow",
              "ComplexStruct1"
            ],
            "type":18
          },
          "selector":"0x7869811a"
        },
        {
          "args":[
            {
              "label":"s",
              "type":{
                "displayName":[
                  "ModForComplexStructOverflow",
                  "ComplexStruct1"
                ],
                "type":18
              }
            }
          ],
          "docs":[

          ],
          "label":"get_complex_struct_4",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "ComplexStruct1"
            ],
            "type":14
          },
          "selector":"0xc8a8e05d"
        },
        {
          "args":[
            {
              "label":"spender",
              "type":{
                "displayName":[
                  "psp22_external",
                  "ApproveInput1"
                ],
                "type":2
              }
            },
            {
              "label":"value",
              "type":{
                "displayName":[
                  "psp22_external",
                  "ApproveInput2"
                ],
                "type":0
              }
            }
          ],
          "docs":[
            " Allows `spender` to withdraw from the caller's account multiple times, up to",
            " the `value` amount.",
            "",
            " If this function is called again it overwrites the current allowance with `value`.",
            "",
            " An `Approval` event is emitted.",
            "",
            " # Errors",
            "",
            " Returns `ZeroSenderAddress` error if sender's address is zero.",
            "",
            " Returns `ZeroRecipientAddress` error if recipient's address is zero."
          ],
          "label":"PSP22::approve",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22_external",
              "ApproveOutput"
            ],
            "type":12
          },
          "selector":"0xb20f1bbd"
        },
        {
          "args":[
            {
              "label":"spender",
              "type":{
                "displayName":[
                  "psp22_external",
                  "DecreaseAllowanceInput1"
                ],
                "type":2
              }
            },
            {
              "label":"delta_value",
              "type":{
                "displayName":[
                  "psp22_external",
                  "DecreaseAllowanceInput2"
                ],
                "type":0
              }
            }
          ],
          "docs":[
            " Atomically decreases the allowance granted to `spender` by the caller.",
            "",
            " An `Approval` event is emitted.",
            "",
            " # Errors",
            "",
            " Returns `InsufficientAllowance` error if there are not enough tokens allowed",
            " by owner for `spender`.",
            "",
            " Returns `ZeroSenderAddress` error if sender's address is zero.",
            "",
            " Returns `ZeroRecipientAddress` error if recipient's address is zero."
          ],
          "label":"PSP22::decrease_allowance",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22_external",
              "DecreaseAllowanceOutput"
            ],
            "type":12
          },
          "selector":"0xfecb57d5"
        },
        {
          "args":[
            {
              "label":"from",
              "type":{
                "displayName":[
                  "psp22_external",
                  "TransferFromInput1"
                ],
                "type":2
              }
            },
            {
              "label":"to",
              "type":{
                "displayName":[
                  "psp22_external",
                  "TransferFromInput2"
                ],
                "type":2
              }
            },
            {
              "label":"value",
              "type":{
                "displayName":[
                  "psp22_external",
                  "TransferFromInput3"
                ],
                "type":0
              }
            },
            {
              "label":"data",
              "type":{
                "displayName":[
                  "psp22_external",
                  "TransferFromInput4"
                ],
                "type":19
              }
            }
          ],
          "docs":[
            " Transfers `value` tokens on the behalf of `from` to the account `to`",
            " with additional `data` in unspecified format.",
            "",
            " This can be used to allow a contract to transfer tokens on ones behalf and/or",
            " to charge fees in sub-currencies, for example.",
            "",
            " On success a `Transfer` and `Approval` events are emitted.",
            "",
            " # Errors",
            "",
            " Returns `InsufficientAllowance` error if there are not enough tokens allowed",
            " for the caller to withdraw from `from`.",
            "",
            " Returns `InsufficientBalance` error if there are not enough tokens on",
            " the the account Balance of `from`.",
            "",
            " Returns `ZeroSenderAddress` error if sender's address is zero.",
            "",
            " Returns `ZeroRecipientAddress` error if recipient's address is zero."
          ],
          "label":"PSP22::transfer_from",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22_external",
              "TransferFromOutput"
            ],
            "type":12
          },
          "selector":"0x54b3c76e"
        },
        {
          "args":[
            {
              "label":"to",
              "type":{
                "displayName":[
                  "psp22_external",
                  "TransferInput1"
                ],
                "type":2
              }
            },
            {
              "label":"value",
              "type":{
                "displayName":[
                  "psp22_external",
                  "TransferInput2"
                ],
                "type":0
              }
            },
            {
              "label":"data",
              "type":{
                "displayName":[
                  "psp22_external",
                  "TransferInput3"
                ],
                "type":19
              }
            }
          ],
          "docs":[
            " Transfers `value` amount of tokens from the caller's account to account `to`",
            " with additional `data` in unspecified format.",
            "",
            " On success a `Transfer` event is emitted.",
            "",
            " # Errors",
            "",
            " Returns `InsufficientBalance` error if there are not enough tokens on",
            " the caller's account Balance.",
            "",
            " Returns `ZeroSenderAddress` error if sender's address is zero.",
            "",
            " Returns `ZeroRecipientAddress` error if recipient's address is zero."
          ],
          "label":"PSP22::transfer",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22_external",
              "TransferOutput"
            ],
            "type":12
          },
          "selector":"0xdb20f9f5"
        },
        {
          "args":[

          ],
          "docs":[
            " Returns the total token supply."
          ],
          "label":"PSP22::total_supply",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22_external",
              "TotalSupplyOutput"
            ],
            "type":0
          },
          "selector":"0x162df8c2"
        },
        {
          "args":[
            {
              "label":"owner",
              "type":{
                "displayName":[
                  "psp22_external",
                  "AllowanceInput1"
                ],
                "type":2
              }
            },
            {
              "label":"spender",
              "type":{
                "displayName":[
                  "psp22_external",
                  "AllowanceInput2"
                ],
                "type":2
              }
            }
          ],
          "docs":[
            " Returns the amount which `spender` is still allowed to withdraw from `owner`.",
            "",
            " Returns `0` if no allowance has been set `0`."
          ],
          "label":"PSP22::allowance",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22_external",
              "AllowanceOutput"
            ],
            "type":0
          },
          "selector":"0x4d47d921"
        },
        {
          "args":[
            {
              "label":"owner",
              "type":{
                "displayName":[
                  "psp22_external",
                  "BalanceOfInput1"
                ],
                "type":2
              }
            }
          ],
          "docs":[
            " Returns the account Balance for the specified `owner`.",
            "",
            " Returns `0` if the account is non-existent."
          ],
          "label":"PSP22::balance_of",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22_external",
              "BalanceOfOutput"
            ],
            "type":0
          },
          "selector":"0x6568382f"
        },
        {
          "args":[
            {
              "label":"spender",
              "type":{
                "displayName":[
                  "psp22_external",
                  "IncreaseAllowanceInput1"
                ],
                "type":2
              }
            },
            {
              "label":"delta_value",
              "type":{
                "displayName":[
                  "psp22_external",
                  "IncreaseAllowanceInput2"
                ],
                "type":0
              }
            }
          ],
          "docs":[
            " Atomically increases the allowance granted to `spender` by the caller.",
            "",
            " An `Approval` event is emitted.",
            "",
            " # Errors",
            "",
            " Returns `ZeroSenderAddress` error if sender's address is zero.",
            "",
            " Returns `ZeroRecipientAddress` error if recipient's address is zero."
          ],
          "label":"PSP22::increase_allowance",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22_external",
              "IncreaseAllowanceOutput"
            ],
            "type":12
          },
          "selector":"0x96d6b57a"
        },
        {
          "args":[

          ],
          "docs":[
            " Returns the token symbol."
          ],
          "label":"PSP22Metadata::token_symbol",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22metadata_external",
              "TokenSymbolOutput"
            ],
            "type":11
          },
          "selector":"0x34205be5"
        },
        {
          "args":[

          ],
          "docs":[
            " Returns the token name."
          ],
          "label":"PSP22Metadata::token_name",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22metadata_external",
              "TokenNameOutput"
            ],
            "type":11
          },
          "selector":"0x3d261bd4"
        },
        {
          "args":[

          ],
          "docs":[
            " Returns the token decimals."
          ],
          "label":"PSP22Metadata::token_decimals",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22metadata_external",
              "TokenDecimalsOutput"
            ],
            "type":4
          },
          "selector":"0x7271b782"
        },
        {
          "args":[
            {
              "label":"account",
              "type":{
                "displayName":[
                  "psp22wrapper_external",
                  "WithdrawToInput1"
                ],
                "type":2
              }
            },
            {
              "label":"amount",
              "type":{
                "displayName":[
                  "psp22wrapper_external",
                  "WithdrawToInput2"
                ],
                "type":0
              }
            }
          ],
          "docs":[
            " Allow a user to burn `amount` of wrapped tokens and withdraw the corresponding number of underlying tokens to `account`"
          ],
          "label":"PSP22Wrapper::withdraw_to",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22wrapper_external",
              "WithdrawToOutput"
            ],
            "type":12
          },
          "selector":"0xbae15da6"
        },
        {
          "args":[
            {
              "label":"account",
              "type":{
                "displayName":[
                  "psp22wrapper_external",
                  "DepositForInput1"
                ],
                "type":2
              }
            },
            {
              "label":"amount",
              "type":{
                "displayName":[
                  "psp22wrapper_external",
                  "DepositForInput2"
                ],
                "type":0
              }
            }
          ],
          "docs":[
            " Allow a user to deposit `amount` of underlying tokens and mint `amount` of the wrapped tokens to `account`"
          ],
          "label":"PSP22Wrapper::deposit_for",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22wrapper_external",
              "DepositForOutput"
            ],
            "type":12
          },
          "selector":"0x4ce2ea83"
        },
        {
          "args":[
            {
              "label":"token",
              "type":{
                "displayName":[
                  "flashlender_external",
                  "MaxFlashloanInput1"
                ],
                "type":2
              }
            }
          ],
          "docs":[
            " Call this function in `max_flashloan` function in `impl` block of FlashLender",
            " Maximum amount of `token` available to mint",
            " Bounded by the max value of Balance (u128)"
          ],
          "label":"FlashLender::max_flashloan",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "flashlender_external",
              "MaxFlashloanOutput"
            ],
            "type":0
          },
          "selector":"0x99ddade8"
        },
        {
          "args":[
            {
              "label":"token",
              "type":{
                "displayName":[
                  "flashlender_external",
                  "FlashFeeInput1"
                ],
                "type":2
              }
            },
            {
              "label":"amount",
              "type":{
                "displayName":[
                  "flashlender_external",
                  "FlashFeeInput2"
                ],
                "type":0
              }
            }
          ],
          "docs":[
            " Call this function in `flash_fee` function in `impl` block of FlashLender",
            " Fee for borrowing `amount` of the `token`",
            "",
            " Returns `WrongTokenAddress` error if the `token` account id is not this token"
          ],
          "label":"FlashLender::flash_fee",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "flashlender_external",
              "FlashFeeOutput"
            ],
            "type":20
          },
          "selector":"0xd09b084f"
        },
        {
          "args":[
            {
              "label":"receiver_account",
              "type":{
                "displayName":[
                  "flashlender_external",
                  "FlashloanInput1"
                ],
                "type":2
              }
            },
            {
              "label":"token",
              "type":{
                "displayName":[
                  "flashlender_external",
                  "FlashloanInput2"
                ],
                "type":2
              }
            },
            {
              "label":"amount",
              "type":{
                "displayName":[
                  "flashlender_external",
                  "FlashloanInput3"
                ],
                "type":0
              }
            },
            {
              "label":"data",
              "type":{
                "displayName":[
                  "flashlender_external",
                  "FlashloanInput4"
                ],
                "type":19
              }
            }
          ],
          "docs":[
            " Call this function in `flashloan` function in `impl` block of FlashLender",
            " Mints `amount` of `token` to `receiver_account` and performs the flashloan",
            " `amount` is then burned along with the fee for the flashloan",
            " `receiver_account` must implement `FlashBorrower`",
            "",
            " Returns `AllowanceDoesNotAllowRefund` error if the contract does not have",
            " enough allowance to transfer borrowed amount and fees from `receiver_account`"
          ],
          "label":"FlashLender::flashloan",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "flashlender_external",
              "FlashloanOutput"
            ],
            "type":22
          },
          "selector":"0x67591e60"
        },
        {
          "args":[

          ],
          "docs":[
            " Returns true if the contract is paused, and false otherwise."
          ],
          "label":"Pausable::paused",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "pausable_external",
              "PausedOutput"
            ],
            "type":10
          },
          "selector":"0xd123ce11"
        },
        {
          "args":[

          ],
          "docs":[
            " Returns the address of the current owner."
          ],
          "label":"Ownable::owner",
          "mutates":false,
          "payable":false,
          "returnType":{
            "displayName":[
              "ownable_external",
              "OwnerOutput"
            ],
            "type":2
          },
          "selector":"0x4fa43c8c"
        },
        {
          "args":[

          ],
          "docs":[
            " Leaves the contract without owner. It will not be possible to call",
            " owner's functions anymore. Can only be called by the current owner.",
            "",
            " NOTE: Renouncing ownership will leave the contract without an owner,",
            " thereby removing any functionality that is only available to the owner.",
            "",
            " On success a `OwnershipTransferred` event is emitted.",
            "",
            " # Errors",
            "",
            " Panics with `CallerIsNotOwner` error if caller is not owner"
          ],
          "label":"Ownable::renounce_ownership",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "ownable_external",
              "RenounceOwnershipOutput"
            ],
            "type":23
          },
          "selector":"0x5e228753"
        },
        {
          "args":[
            {
              "label":"new_owner",
              "type":{
                "displayName":[
                  "ownable_external",
                  "TransferOwnershipInput1"
                ],
                "type":2
              }
            }
          ],
          "docs":[
            " Transfers ownership of the contract to a `new_owner`.",
            " Can only be called by the current owner.",
            "",
            " On success a `OwnershipTransferred` event is emitted.",
            "",
            " # Errors",
            "",
            " Panics with `CallerIsNotOwner` error if caller is not owner.",
            "",
            " Panics with `NewOwnerIsZero` error if new owner's address is zero."
          ],
          "label":"Ownable::transfer_ownership",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "ownable_external",
              "TransferOwnershipOutput"
            ],
            "type":23
          },
          "selector":"0x11f43efd"
        },
        {
          "args":[
            {
              "label":"account",
              "type":{
                "displayName":[
                  "psp22burnable_external",
                  "BurnInput1"
                ],
                "type":2
              }
            },
            {
              "label":"amount",
              "type":{
                "displayName":[
                  "psp22burnable_external",
                  "BurnInput2"
                ],
                "type":0
              }
            }
          ],
          "docs":[
            " override the `burn` function to add the access modifier"
          ],
          "label":"PSP22Burnable::burn",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22burnable_external",
              "BurnOutput"
            ],
            "type":12
          },
          "selector":"0x7a9da510"
        },
        {
          "args":[
            {
              "label":"account",
              "type":{
                "displayName":[
                  "psp22mintable_external",
                  "MintInput1"
                ],
                "type":2
              }
            },
            {
              "label":"amount",
              "type":{
                "displayName":[
                  "psp22mintable_external",
                  "MintInput2"
                ],
                "type":0
              }
            }
          ],
          "docs":[
            " override the `mint` function to add the access modifier"
          ],
          "label":"PSP22Mintable::mint",
          "mutates":true,
          "payable":false,
          "returnType":{
            "displayName":[
              "psp22mintable_external",
              "MintOutput"
            ],
            "type":12
          },
          "selector":"0xfc3c75d4"
        }
      ]
    },
    "storage":{
      "struct":{
        "fields":[
          {
            "layout":{
              "struct":{
                "fields":[
                  {
                    "layout":{
                      "cell":{
                        "key":"0xb35c9a7cdda1f825a6ed889040b074ca5a2f83461f5e7ecf5794400920e6bf3c",
                        "ty":0
                      }
                    },
                    "name":"supply"
                  },
                  {
                    "layout":{
                      "cell":{
                        "key":"0xb45c9a7cdda1f825a6ed889040b074ca5a2f83461f5e7ecf5794400920e6bf3c",
                        "ty":1
                      }
                    },
                    "name":"balances"
                  },
                  {
                    "layout":{
                      "cell":{
                        "key":"0xb55c9a7cdda1f825a6ed889040b074ca5a2f83461f5e7ecf5794400920e6bf3c",
                        "ty":6
                      }
                    },
                    "name":"allowances"
                  },
                  {
                    "layout":{
                      "enum":{
                        "dispatchKey":"0xb65c9a7cdda1f825a6ed889040b074ca5a2f83461f5e7ecf5794400920e6bf3c",
                        "variants":{
                          "0":{
                            "fields":[
                              {
                                "layout":{
                                  "cell":{
                                    "key":"0xb75c9a7cdda1f825a6ed889040b074ca5a2f83461f5e7ecf5794400920e6bf3c",
                                    "ty":8
                                  }
                                },
                                "name":null
                              }
                            ]
                          },
                          "1":{
                            "fields":[

                            ]
                          }
                        }
                      }
                    },
                    "name":"_reserved"
                  }
                ]
              }
            },
            "name":"psp22"
          },
          {
            "layout":{
              "struct":{
                "fields":[
                  {
                    "layout":{
                      "cell":{
                        "key":"0x238cb4a8e1768578ab199af6c3822baceafe928fad843580aa9862286e062059",
                        "ty":2
                      }
                    },
                    "name":"owner"
                  },
                  {
                    "layout":{
                      "enum":{
                        "dispatchKey":"0x248cb4a8e1768578ab199af6c3822baceafe928fad843580aa9862286e062059",
                        "variants":{
                          "0":{
                            "fields":[
                              {
                                "layout":{
                                  "cell":{
                                    "key":"0x258cb4a8e1768578ab199af6c3822baceafe928fad843580aa9862286e062059",
                                    "ty":8
                                  }
                                },
                                "name":null
                              }
                            ]
                          },
                          "1":{
                            "fields":[

                            ]
                          }
                        }
                      }
                    },
                    "name":"_reserved"
                  }
                ]
              }
            },
            "name":"ownable"
          },
          {
            "layout":{
              "struct":{
                "fields":[
                  {
                    "layout":{
                      "enum":{
                        "dispatchKey":"0xa7573061b79f34e821decfabe36b9a053469f493a4ca779d44895fe3ffa3c640",
                        "variants":{
                          "0":{
                            "fields":[
                              {
                                "layout":{
                                  "cell":{
                                    "key":"0xa8573061b79f34e821decfabe36b9a053469f493a4ca779d44895fe3ffa3c640",
                                    "ty":9
                                  }
                                },
                                "name":null
                              }
                            ]
                          },
                          "1":{
                            "fields":[

                            ]
                          }
                        }
                      }
                    },
                    "name":"name"
                  },
                  {
                    "layout":{
                      "enum":{
                        "dispatchKey":"0xa8573061b79f34e821decfabe36b9a053469f493a4ca779d44895fe3ffa3c640",
                        "variants":{
                          "0":{
                            "fields":[
                              {
                                "layout":{
                                  "cell":{
                                    "key":"0xa9573061b79f34e821decfabe36b9a053469f493a4ca779d44895fe3ffa3c640",
                                    "ty":9
                                  }
                                },
                                "name":null
                              }
                            ]
                          },
                          "1":{
                            "fields":[

                            ]
                          }
                        }
                      }
                    },
                    "name":"symbol"
                  },
                  {
                    "layout":{
                      "cell":{
                        "key":"0xa9573061b79f34e821decfabe36b9a053469f493a4ca779d44895fe3ffa3c640",
                        "ty":4
                      }
                    },
                    "name":"decimals"
                  },
                  {
                    "layout":{
                      "enum":{
                        "dispatchKey":"0xaa573061b79f34e821decfabe36b9a053469f493a4ca779d44895fe3ffa3c640",
                        "variants":{
                          "0":{
                            "fields":[
                              {
                                "layout":{
                                  "cell":{
                                    "key":"0xab573061b79f34e821decfabe36b9a053469f493a4ca779d44895fe3ffa3c640",
                                    "ty":8
                                  }
                                },
                                "name":null
                              }
                            ]
                          },
                          "1":{
                            "fields":[

                            ]
                          }
                        }
                      }
                    },
                    "name":"_reserved"
                  }
                ]
              }
            },
            "name":"metadata"
          },
          {
            "layout":{
              "struct":{
                "fields":[
                  {
                    "layout":{
                      "cell":{
                        "key":"0x71566cb8b902c78c71575f2412022e411cbb09af222e9404b07695f6969edf96",
                        "ty":2
                      }
                    },
                    "name":"underlying"
                  },
                  {
                    "layout":{
                      "enum":{
                        "dispatchKey":"0x72566cb8b902c78c71575f2412022e411cbb09af222e9404b07695f6969edf96",
                        "variants":{
                          "0":{
                            "fields":[
                              {
                                "layout":{
                                  "cell":{
                                    "key":"0x73566cb8b902c78c71575f2412022e411cbb09af222e9404b07695f6969edf96",
                                    "ty":8
                                  }
                                },
                                "name":null
                              }
                            ]
                          },
                          "1":{
                            "fields":[

                            ]
                          }
                        }
                      }
                    },
                    "name":"_reserved"
                  }
                ]
              }
            },
            "name":"wrapper"
          },
          {
            "layout":{
              "struct":{
                "fields":[
                  {
                    "layout":{
                      "cell":{
                        "key":"0x9f7aa12448a3594eab26c974e0d052538472255c6f08c7d68e564c9d88101455",
                        "ty":10
                      }
                    },
                    "name":"paused"
                  },
                  {
                    "layout":{
                      "enum":{
                        "dispatchKey":"0xa07aa12448a3594eab26c974e0d052538472255c6f08c7d68e564c9d88101455",
                        "variants":{
                          "0":{
                            "fields":[
                              {
                                "layout":{
                                  "cell":{
                                    "key":"0xa17aa12448a3594eab26c974e0d052538472255c6f08c7d68e564c9d88101455",
                                    "ty":8
                                  }
                                },
                                "name":null
                              }
                            ]
                          },
                          "1":{
                            "fields":[

                            ]
                          }
                        }
                      }
                    },
                    "name":"_reserved"
                  }
                ]
              }
            },
            "name":"pause"
          },
          {
            "layout":{
              "cell":{
                "key":"0x0000000000000000000000000000000000000000000000000000000000000000",
                "ty":0
              }
            },
            "name":"cap"
          }
        ]
      }
    },
    "types":[
      {
        "id":0,
        "type":{
          "def":{
            "primitive":"u128"
          }
        }
      },
      {
        "id":1,
        "type":{
          "def":{
            "composite":{
              "fields":[
                {
                  "name":"offset_key",
                  "type":5,
                  "typeName":"Key"
                }
              ]
            }
          },
          "params":[
            {
              "name":"K",
              "type":2
            },
            {
              "name":"V",
              "type":0
            }
          ],
          "path":[
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id":2,
        "type":{
          "def":{
            "composite":{
              "fields":[
                {
                  "type":3,
                  "typeName":"[u8; 32]"
                }
              ]
            }
          },
          "path":[
            "ink_env",
            "types",
            "AccountId"
          ]
        }
      },
      {
        "id":3,
        "type":{
          "def":{
            "array":{
              "len":32,
              "type":4
            }
          }
        }
      },
      {
        "id":4,
        "type":{
          "def":{
            "primitive":"u8"
          }
        }
      },
      {
        "id":5,
        "type":{
          "def":{
            "composite":{
              "fields":[
                {
                  "type":3,
                  "typeName":"[u8; 32]"
                }
              ]
            }
          },
          "path":[
            "ink_primitives",
            "Key"
          ]
        }
      },
      {
        "id":6,
        "type":{
          "def":{
            "composite":{
              "fields":[
                {
                  "name":"offset_key",
                  "type":5,
                  "typeName":"Key"
                }
              ]
            }
          },
          "params":[
            {
              "name":"K",
              "type":7
            },
            {
              "name":"V",
              "type":0
            }
          ],
          "path":[
            "ink_storage",
            "lazy",
            "mapping",
            "Mapping"
          ]
        }
      },
      {
        "id":7,
        "type":{
          "def":{
            "tuple":[
              2,
              2
            ]
          }
        }
      },
      {
        "id":8,
        "type":{
          "def":{
            "tuple":[

            ]
          }
        }
      },
      {
        "id":9,
        "type":{
          "def":{
            "primitive":"str"
          }
        }
      },
      {
        "id":10,
        "type":{
          "def":{
            "primitive":"bool"
          }
        }
      },
      {
        "id":11,
        "type":{
          "def":{
            "variant":{
              "variants":[
                {
                  "index":0,
                  "name":"None"
                },
                {
                  "fields":[
                    {
                      "type":9
                    }
                  ],
                  "index":1,
                  "name":"Some"
                }
              ]
            }
          },
          "params":[
            {
              "name":"T",
              "type":9
            }
          ],
          "path":[
            "Option"
          ]
        }
      },
      {
        "id":12,
        "type":{
          "def":{
            "variant":{
              "variants":[
                {
                  "fields":[
                    {
                      "type":8
                    }
                  ],
                  "index":0,
                  "name":"Ok"
                },
                {
                  "fields":[
                    {
                      "type":13
                    }
                  ],
                  "index":1,
                  "name":"Err"
                }
              ]
            }
          },
          "params":[
            {
              "name":"T",
              "type":8
            },
            {
              "name":"E",
              "type":13
            }
          ],
          "path":[
            "Result"
          ]
        }
      },
      {
        "id":13,
        "type":{
          "def":{
            "variant":{
              "variants":[
                {
                  "fields":[
                    {
                      "type":9,
                      "typeName":"String"
                    }
                  ],
                  "index":0,
                  "name":"Custom"
                },
                {
                  "index":1,
                  "name":"InsufficientBalance"
                },
                {
                  "index":2,
                  "name":"InsufficientAllowance"
                },
                {
                  "index":3,
                  "name":"ZeroRecipientAddress"
                },
                {
                  "index":4,
                  "name":"ZeroSenderAddress"
                },
                {
                  "fields":[
                    {
                      "type":9,
                      "typeName":"String"
                    }
                  ],
                  "index":5,
                  "name":"SafeTransferCheckFailed"
                }
              ]
            }
          },
          "path":[
            "openbrush_contracts",
            "traits",
            "errors",
            "psp22",
            "PSP22Error"
          ]
        }
      },
      {
        "id":14,
        "type":{
          "def":{
            "composite":{
              "fields":[
                {
                  "name":"a",
                  "type":15,
                  "typeName":"u32"
                },
                {
                  "name":"b",
                  "type":15,
                  "typeName":"u32"
                },
                {
                  "name":"c",
                  "type":9,
                  "typeName":"String"
                },
                {
                  "name":"d",
                  "type":16,
                  "typeName":"Vec<u32>"
                },
                {
                  "name":"e",
                  "type":3,
                  "typeName":"[u8; 32]"
                },
                {
                  "name":"f",
                  "type":17,
                  "typeName":"[u128; 32]"
                }
              ]
            }
          },
          "path":[
            "contract_with_complex_types",
            "my_token",
            "ComplexStruct1"
          ]
        }
      },
      {
        "id":15,
        "type":{
          "def":{
            "primitive":"u32"
          }
        }
      },
      {
        "id":16,
        "type":{
          "def":{
            "sequence":{
              "type":15
            }
          }
        }
      },
      {
        "id":17,
        "type":{
          "def":{
            "array":{
              "len":32,
              "type":0
            }
          }
        }
      },
      {
        "id":18,
        "type":{
          "def":{
            "composite":{
              "fields":[
                {
                  "name":"aa",
                  "type":15,
                  "typeName":"u32"
                },
                {
                  "name":"bb",
                  "type":15,
                  "typeName":"u32"
                },
                {
                  "name":"cc",
                  "type":9,
                  "typeName":"String"
                }
              ]
            }
          },
          "path":[
            "contract_with_complex_types",
            "my_token",
            "ModForComplexStructOverflow",
            "ComplexStruct1"
          ]
        }
      },
      {
        "id":19,
        "type":{
          "def":{
            "sequence":{
              "type":4
            }
          }
        }
      },
      {
        "id":20,
        "type":{
          "def":{
            "variant":{
              "variants":[
                {
                  "fields":[
                    {
                      "type":0
                    }
                  ],
                  "index":0,
                  "name":"Ok"
                },
                {
                  "fields":[
                    {
                      "type":21
                    }
                  ],
                  "index":1,
                  "name":"Err"
                }
              ]
            }
          },
          "params":[
            {
              "name":"T",
              "type":0
            },
            {
              "name":"E",
              "type":21
            }
          ],
          "path":[
            "Result"
          ]
        }
      },
      {
        "id":21,
        "type":{
          "def":{
            "variant":{
              "variants":[
                {
                  "fields":[
                    {
                      "type":9,
                      "typeName":"String"
                    }
                  ],
                  "index":0,
                  "name":"Custom"
                },
                {
                  "index":1,
                  "name":"WrongTokenAddress"
                },
                {
                  "index":2,
                  "name":"AllowanceDoesNotAllowRefund"
                },
                {
                  "fields":[
                    {
                      "type":9,
                      "typeName":"String"
                    }
                  ],
                  "index":3,
                  "name":"BorrowerRejected"
                }
              ]
            }
          },
          "path":[
            "openbrush_contracts",
            "traits",
            "errors",
            "flashloan",
            "FlashLenderError"
          ]
        }
      },
      {
        "id":22,
        "type":{
          "def":{
            "variant":{
              "variants":[
                {
                  "fields":[
                    {
                      "type":8
                    }
                  ],
                  "index":0,
                  "name":"Ok"
                },
                {
                  "fields":[
                    {
                      "type":21
                    }
                  ],
                  "index":1,
                  "name":"Err"
                }
              ]
            }
          },
          "params":[
            {
              "name":"T",
              "type":8
            },
            {
              "name":"E",
              "type":21
            }
          ],
          "path":[
            "Result"
          ]
        }
      },
      {
        "id":23,
        "type":{
          "def":{
            "variant":{
              "variants":[
                {
                  "fields":[
                    {
                      "type":8
                    }
                  ],
                  "index":0,
                  "name":"Ok"
                },
                {
                  "fields":[
                    {
                      "type":24
                    }
                  ],
                  "index":1,
                  "name":"Err"
                }
              ]
            }
          },
          "params":[
            {
              "name":"T",
              "type":8
            },
            {
              "name":"E",
              "type":24
            }
          ],
          "path":[
            "Result"
          ]
        }
      },
      {
        "id":24,
        "type":{
          "def":{
            "variant":{
              "variants":[
                {
                  "index":0,
                  "name":"CallerIsNotOwner"
                },
                {
                  "index":1,
                  "name":"NewOwnerIsZero"
                }
              ]
            }
          },
          "path":[
            "openbrush_contracts",
            "traits",
            "errors",
            "ownable",
            "OwnableError"
          ]
        }
      }
    ]
  }
}